// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/models/interfaces.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab-hiring.cabify.tech/cabify/interviewing/car-pooling-challenge-go/internal/models"
)

// MockICarStorage is a mock of ICarStorage interface.
type MockICarStorage struct {
	ctrl     *gomock.Controller
	recorder *MockICarStorageMockRecorder
}

// MockICarStorageMockRecorder is the mock recorder for MockICarStorage.
type MockICarStorageMockRecorder struct {
	mock *MockICarStorage
}

// NewMockICarStorage creates a new mock instance.
func NewMockICarStorage(ctrl *gomock.Controller) *MockICarStorage {
	mock := &MockICarStorage{ctrl: ctrl}
	mock.recorder = &MockICarStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICarStorage) EXPECT() *MockICarStorageMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockICarStorage) FindById(carId uint) (*models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", carId)
	ret0, _ := ret[0].(*models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockICarStorageMockRecorder) FindById(carId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockICarStorage)(nil).FindById), carId)
}

// GetAllCars mocks base method.
func (m *MockICarStorage) GetAllCars() []*models.Car {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCars")
	ret0, _ := ret[0].([]*models.Car)
	return ret0
}

// GetAllCars indicates an expected call of GetAllCars.
func (mr *MockICarStorageMockRecorder) GetAllCars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCars", reflect.TypeOf((*MockICarStorage)(nil).GetAllCars))
}

// NewCar mocks base method.
func (m *MockICarStorage) NewCar(car *models.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewCar indicates an expected call of NewCar.
func (mr *MockICarStorageMockRecorder) NewCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCar", reflect.TypeOf((*MockICarStorage)(nil).NewCar), car)
}

// ResetMemory mocks base method.
func (m *MockICarStorage) ResetMemory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMemory")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetMemory indicates an expected call of ResetMemory.
func (mr *MockICarStorageMockRecorder) ResetMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMemory", reflect.TypeOf((*MockICarStorage)(nil).ResetMemory))
}

// UpdateCar mocks base method.
func (m *MockICarStorage) UpdateCar(carId uint, newCar *models.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", carId, newCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockICarStorageMockRecorder) UpdateCar(carId, newCar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockICarStorage)(nil).UpdateCar), carId, newCar)
}

// MockIJourneyStorage is a mock of IJourneyStorage interface.
type MockIJourneyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIJourneyStorageMockRecorder
}

// MockIJourneyStorageMockRecorder is the mock recorder for MockIJourneyStorage.
type MockIJourneyStorageMockRecorder struct {
	mock *MockIJourneyStorage
}

// NewMockIJourneyStorage creates a new mock instance.
func NewMockIJourneyStorage(ctrl *gomock.Controller) *MockIJourneyStorage {
	mock := &MockIJourneyStorage{ctrl: ctrl}
	mock.recorder = &MockIJourneyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJourneyStorage) EXPECT() *MockIJourneyStorageMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockIJourneyStorage) DeleteById(journeyId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", journeyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIJourneyStorageMockRecorder) DeleteById(journeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIJourneyStorage)(nil).DeleteById), journeyId)
}

// FindById mocks base method.
func (m *MockIJourneyStorage) FindById(journeyId uint) (*models.Journey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", journeyId)
	ret0, _ := ret[0].(*models.Journey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIJourneyStorageMockRecorder) FindById(journeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIJourneyStorage)(nil).FindById), journeyId)
}

// NewJourney mocks base method.
func (m *MockIJourneyStorage) NewJourney(journey *models.Journey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJourney", journey)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewJourney indicates an expected call of NewJourney.
func (mr *MockIJourneyStorageMockRecorder) NewJourney(journey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJourney", reflect.TypeOf((*MockIJourneyStorage)(nil).NewJourney), journey)
}

// ResetMemory mocks base method.
func (m *MockIJourneyStorage) ResetMemory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMemory")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetMemory indicates an expected call of ResetMemory.
func (mr *MockIJourneyStorageMockRecorder) ResetMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMemory", reflect.TypeOf((*MockIJourneyStorage)(nil).ResetMemory))
}

// UpdateJourney mocks base method.
func (m *MockIJourneyStorage) UpdateJourney(journeyId uint, newJourney *models.Journey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJourney", journeyId, newJourney)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJourney indicates an expected call of UpdateJourney.
func (mr *MockIJourneyStorageMockRecorder) UpdateJourney(journeyId, newJourney interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJourney", reflect.TypeOf((*MockIJourneyStorage)(nil).UpdateJourney), journeyId, newJourney)
}

// MockIPenidngStorage is a mock of IPenidngStorage interface.
type MockIPenidngStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIPenidngStorageMockRecorder
}

// MockIPenidngStorageMockRecorder is the mock recorder for MockIPenidngStorage.
type MockIPenidngStorageMockRecorder struct {
	mock *MockIPenidngStorage
}

// NewMockIPenidngStorage creates a new mock instance.
func NewMockIPenidngStorage(ctrl *gomock.Controller) *MockIPenidngStorage {
	mock := &MockIPenidngStorage{ctrl: ctrl}
	mock.recorder = &MockIPenidngStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPenidngStorage) EXPECT() *MockIPenidngStorageMockRecorder {
	return m.recorder
}

// DeleteById mocks base method.
func (m *MockIPenidngStorage) DeleteById(journeyId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", journeyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIPenidngStorageMockRecorder) DeleteById(journeyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIPenidngStorage)(nil).DeleteById), journeyId)
}

// GetAllPendings mocks base method.
func (m *MockIPenidngStorage) GetAllPendings() []*models.Journey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPendings")
	ret0, _ := ret[0].([]*models.Journey)
	return ret0
}

// GetAllPendings indicates an expected call of GetAllPendings.
func (mr *MockIPenidngStorageMockRecorder) GetAllPendings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPendings", reflect.TypeOf((*MockIPenidngStorage)(nil).GetAllPendings))
}

// NewPending mocks base method.
func (m *MockIPenidngStorage) NewPending(pending *models.Journey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPending", pending)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewPending indicates an expected call of NewPending.
func (mr *MockIPenidngStorageMockRecorder) NewPending(pending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPending", reflect.TypeOf((*MockIPenidngStorage)(nil).NewPending), pending)
}

// ResetMemory mocks base method.
func (m *MockIPenidngStorage) ResetMemory() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMemory")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetMemory indicates an expected call of ResetMemory.
func (mr *MockIPenidngStorageMockRecorder) ResetMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMemory", reflect.TypeOf((*MockIPenidngStorage)(nil).ResetMemory))
}

// UpdatePending mocks base method.
func (m *MockIPenidngStorage) UpdatePending(pendingId uint, newPending *models.Journey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePending", pendingId, newPending)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePending indicates an expected call of UpdatePending.
func (mr *MockIPenidngStorageMockRecorder) UpdatePending(pendingId, newPending interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePending", reflect.TypeOf((*MockIPenidngStorage)(nil).UpdatePending), pendingId, newPending)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// CarsStorage mocks base method.
func (m *MockTransaction) CarsStorage() models.ICarStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarsStorage")
	ret0, _ := ret[0].(models.ICarStorage)
	return ret0
}

// CarsStorage indicates an expected call of CarsStorage.
func (mr *MockTransactionMockRecorder) CarsStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarsStorage", reflect.TypeOf((*MockTransaction)(nil).CarsStorage))
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// HasCommited mocks base method.
func (m *MockTransaction) HasCommited() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCommited")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCommited indicates an expected call of HasCommited.
func (mr *MockTransactionMockRecorder) HasCommited() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCommited", reflect.TypeOf((*MockTransaction)(nil).HasCommited))
}

// JourneysStorage mocks base method.
func (m *MockTransaction) JourneysStorage() models.IJourneyStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JourneysStorage")
	ret0, _ := ret[0].(models.IJourneyStorage)
	return ret0
}

// JourneysStorage indicates an expected call of JourneysStorage.
func (mr *MockTransactionMockRecorder) JourneysStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JourneysStorage", reflect.TypeOf((*MockTransaction)(nil).JourneysStorage))
}

// PendingsStorage mocks base method.
func (m *MockTransaction) PendingsStorage() models.IPenidngStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingsStorage")
	ret0, _ := ret[0].(models.IPenidngStorage)
	return ret0
}

// PendingsStorage indicates an expected call of PendingsStorage.
func (mr *MockTransactionMockRecorder) PendingsStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingsStorage", reflect.TypeOf((*MockTransaction)(nil).PendingsStorage))
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// MockTransactionFactory is a mock of TransactionFactory interface.
type MockTransactionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionFactoryMockRecorder
}

// MockTransactionFactoryMockRecorder is the mock recorder for MockTransactionFactory.
type MockTransactionFactoryMockRecorder struct {
	mock *MockTransactionFactory
}

// NewMockTransactionFactory creates a new mock instance.
func NewMockTransactionFactory(ctrl *gomock.Controller) *MockTransactionFactory {
	mock := &MockTransactionFactory{ctrl: ctrl}
	mock.recorder = &MockTransactionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionFactory) EXPECT() *MockTransactionFactoryMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTransactionFactory) Begin() (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockTransactionFactoryMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTransactionFactory)(nil).Begin))
}
